#!/bin/bash

####################################################
## REALM_CLIENT_USER_CONF ##########################
####################################################

REALM="my_realm"

CLIENT_ID="my_app"
CLIENT_SECRET_ID="my_secret"

ADMIN_USER_NAME="admin"
PASSWORD_ADMIN="admin"

PUBLIC_USER_NAME="public"
PASSWORD_PUBLIC="public"

ROLE="manager"

####################################################
#### SERVEURS CONF #################################
####################################################

HTTP_SERVER_BASE="http://localhost:8180"

HTTPS_SERVER_BASE="https://localhost:8543"

SERVER_AUTH="$HTTP_SERVER_BASE/auth" 

KEYCLOAK_DIRECTORY_NAME="keycloak-4.8.3.Final"

KEYCLAK_DIRECTORY_BIN="$KEYCLOAK_DIRECTORY_NAME/bin"

####################################################
####################################################

### REMOVE IF EXISTS ###############################
####################################################

REMOVE_IF_EXISTS="true"

####################################################

####################################################
### CERTIFICATE MANAGEMENT #########################
####################################################

# File generated by the script certificate_generator.sh
JKS_FILE_NAME="keystore.jks"

PATH_JKS=`pwd`/$JKS_FILE_NAME

# $JKS_PASSWORD MUST BE SAME AS $JKS_DEST_KEY_PASS
# in the script certificate_generator.sh
JKS_PASSWORD="my_super_password_007"

###################################################
###################################################

echo 

if [[ ! -d "$KEYCLAK_DIRECTORY_BIN/" ]] ; then 

   echo
   echo " It seems that keycloak is not installed."
   echo " keycloak has to be installed in a directory named $KEYCLOAK_DIRECTORY_NAME "
   echo
   exit

fi

cd $KEYCLAK_DIRECTORY_BIN

##################################################
## CHECK LOGIN AND PASSWORD ######################
##################################################

if [ -z "$2" -o -z "$3" ] ; then 
  
   echo " You have to provide a LOGIN and PASSWORD for Authentication "
   echo " Command Ex : ./keycloak_client.sh http    admin admin       "
   echo "            : ./keycloak_client.sh https   admin admin       "
   echo "            : ./keycloak_client.sh adduser admin admin       "
   echo
   exit 
fi


##################################
## HTTPS MODE Authentication #####
##################################

if [ "$1" = "https" -o  "$1" = "HTTPS" ] ; then 

  if [[ ! -f $PATH_JKS ]] ; then 

       echo 
       echo " When keycloak is started in HTTPS MODE , you have to provide a JKS File"
       echo " Please, run the script [[ certificate_generator.sh ]] and restart the client "
       echo
       exit       
  fi
   
  SERVER_AUTH="$HTTPS_SERVER_BASE/auth"
  
  ## Trust keystore 
 ./kcadm.sh config truststore  --trustpass  $JKS_PASSWORD $PATH_JKS
 
fi


#################################
#### Add new User Manager #######
#################################


if [[ "$1" = "adduser" ]] ; then 

  #create new admin user with :

  if [ -z "$2" -o -z "$3" ] ; then 
  
    echo
    echo " To Add a User, you have to provide a LOGIN + PASSWORD in the arguments "
    echo " Command Ex : ./keycloak_client.sh adduser admin admin "
    echo
    exit 
  fi
  
  USER="$2"
  PASSWORD="$3"
  
 ./add-user-keycloak.sh -r master -u $USER -p  $PASSWORD 
  
  echo 
  
  exit
 
fi


## Authenticattion # Credentials
  
./kcadm.sh config credentials --server $SERVER_AUTH \
                              --realm master        \
                              --user $2             \
                              --password $3     
                              # -s sslRequired=NONE
echo 

################################
## REALM #######################
################################

if [ $REMOVE_IF_EXISTS == "true" ]; then

   echo " **** Warning : REMOVE_IF_EXISTS == true => the realm [ $REALM ] will be REMOVED and RECREATED "
   echo
    
fi 

RESULT_REALM=`./kcadm.sh get realms/$REALM --fields id   2>&1 `

if [[ $RESULT_REALM == *"Resource not found"* ]]; then

   echo " Create REALM ( $REALM ) And Enable it "
   ./kcadm.sh create realms -s realm=$REALM -s enabled=true
  
else 

   echo " REALM ( $REALM ) Already Exists "
  
   if [[ $REMOVE_IF_EXISTS == "true" ]]; then
    
      echo " It will be removed and recreated "
      # Remove the new realm if already exists 
      ./kcadm.sh delete realms/$REALM 
       echo ; echo " Create REALM ( $REALM ) And Enable it "
      ./kcadm.sh create realms -s realm=$REALM -s enabled=true
      
   else 
  
      echo " The Realm ( $REALM ) Will be used "
  
   fi  

fi

echo
 
################################
## CLIENT ######################
################################

# Create new realm roles
#./kcadm.sh create roles -r $REALM -s name=jaxy_admin_role  \
#                                  -s 'description=Admin user with full set of permissions'
#./kcadm.sh create roles -r $REALM -s name=jaxy_public_role \
#                                  -s 'description=Public user with limited set of permissions'

# Create a new public client

## Chek if Client Already EXISTS :
ALREADY_EXISTS_CLIENT=`./kcadm.sh get clients -r  $REALM --fields id  -q clientId=$CLIENT_ID  2>&1 `

## Client exists 
if [[ $ALREADY_EXISTS_CLIENT !=  "[ ]" ]] ; then 
   EXISTS_CLIENT_ID=` echo ${ALREADY_EXISTS_CLIENT##*: \"} `
   EXISTS_CLIENT_ID=` echo ${EXISTS_CLIENT_ID/\" \} ]}     `
else
## Client doesn't exists yet 
   EXISTS_CLIENT_ID=""
fi

if [[ ! -z  "$EXISTS_CLIENT_ID" ]] ; then 

  echo " Client Already Exists in the Realm ( $REALM ), with UUID ( $EXISTS_CLIENT_ID ) , it will be used "
  ClientUUID=$EXISTS_CLIENT_ID
    
else 

  echo " Create CLIENT ( $CLIENT_ID ) in the REALM ( $REALM ) "
  ClientUUID=`./kcadm.sh create clients -r $REALM                   \
                                        -s clientId=$CLIENT_ID      \
                                        -s secret=$CLIENT_SECRET_ID \
                                        -s publicClient=false -i `
fi


echo " Update CLIENT ( $CLIENT_ID ), set directAccessGrantsEnabled to TRUE "

# Update Client 
./kcadm.sh update clients/$ClientUUID -r $REALM -s enabled=true                          \
                                      -s publicClient=false                              \
                                      -s 'redirectUris=["http://localhost:8080/jaxy/*"]' \
                                      -s directAccessGrantsEnabled=true                  \
                                      -s baseUrl=http://localhost:8080/jaxy              \
                                      -s adminUrl=http://localhost:8080/jaxy

################################
## USERS #######################
################################

echo ; echo " Manage users -- " ; echo 

# Create a new user
echo " Create User ( $ADMIN_USER_NAME ) and Enabale it "
./kcadm.sh create users -r $REALM -s username=$ADMIN_USER_NAME -s enabled=true 

echo; echo " Create User ( $PUBLIC_USER_NAME ) and Enabale it "
./kcadm.sh create users -r $REALM -s username=$PUBLIC_USER_NAME -s enabled=true

echo ; echo " Update User ( $ADMIN_USER_NAME ), set password  to :  $PASSWORD_ADMIN "
./kcadm.sh set-password -r $REALM --username $ADMIN_USER_NAME --new-password $PASSWORD_ADMIN

echo ; echo " Update User ( $PUBLIC_USER_NAME ), set password  to : $PASSWORD_PUBLIC "
./kcadm.sh set-password -r $REALM --username $PUBLIC_USER_NAME --new-password $PASSWORD_PUBLIC


#Add client role to a user

# ./kcadm.sh add-roles -r $REALM --uusername $ADMIN_USER_NAME  \
#                                --rolename jaxy_admin_role --rolename jaxy_public_role 
# ./kcadm.sh add-roles -r $REALM --uusername $PUBLIC_USER_NAME \
#                                --rolename jaxy_public_role 


################################
## ASSIGN ROLES ################
################################

echo 

echo " Manage Roles -- "
echo 
echo " Create Role ( $ROLE ) for the client ( $CLIENT_ID ) in the REALM ( $REALM ) "
./kcadm.sh create clients/$ClientUUID/roles -r $REALM     \
                                            -s name=$ROLE \
                                            -s 'description=user can access to portal'

echo ; echo " Add Client role to user : "

echo " Add The Role ( $ROLE ) of the client ( $CLIENT_ID ) in the REALM ( $REALM ) to the user ( $ADMIN_USER_NAME ) "
./kcadm.sh add-roles -r $REALM --uusername $ADMIN_USER_NAME --cclientid $CLIENT_ID --rolename $ROLE	

echo


 ## With recent keycloak version , the client id is apparently no longer
 ## automatically added to the audience field 'aud' of the access token.
 ## So, we have to create a mapper and overwriting the aud claim.
                                             
./kcadm.sh create clients/$ClientUUID/protocol-mappers/models \
           -r $REALM                                          \
           -s name=aud                                        \
           -s protocol=openid-connect                         \
           -s protocolMapper=oidc-hardcoded-claim-mapper      \
           -s "config.\"jsonType.label\"=String"              \
           -s "config.\"access.token.claim\"=true"            \
           -s "config.\"claim.name\"=aud"                     \
           -s "config.\"claim.value\"=$CLIENT_ID"
        
echo 

